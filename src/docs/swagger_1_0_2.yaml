openapi: 3.0.0
info:
  description: AURORAL Node interface - developed by bAvenir. Standard API to interact with the AURORAL platform.
  version: 1.0.0
  title: Auroral Node Agent
  contact:
    name: API Support
    url: https://github.com/AuroralH2020/auroral-node/wiki
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
security:
  - type: ['http']
  - scheme: ['basic']
externalDocs:
  description: AURORAL platform
  url: https://auroral.dev.bavneir.eu
tags:
  - name: Authentication
    description: Login/Logout of local infrastructure into AURORAL
  - name: Registry
    description: Registration of new devices or services into AURORAL
  - name: Local Discovery
    description: Retrieve metadata about your local infrastructure
  - name: Remote Discovery
    description: Discover remote resources and retrieve their metadata
  - name: Consumption
    description: Resource consumption calls, request properties or publish events among others
      among others
  - name: Collaboration
    description: Check your partnerships and contracts
  - name: Admin
    description: Monitor and manage your Node
paths:
  "/api/login/{id}":
    get:
      summary: Connect an item
      description: Log in your gateway instance or any object registered with it (Providing
        its id)
      tags:
        - Authentication
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  "/api/logout/{id}":
    get:
      summary: Disconnect an item
      description: Logout your gateway instance or any object registered with it (Providing
        its id)
      tags:
        - Authentication
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  "/api/registration":
    post:
      summary: Register an item
      description: >
        Register an object in the AURORAL platform.


        For the registration AURORAL uses W3C Thing Descriptions, and optional parameters to send additional information to the platform. 
        
        - td: [Mandatory] Thing Description Object.
        
        - avatar: [Optional] Base64 image representation for the object. It will be displayed in the Neighbourhood Manager.


        For creating a Thing Description please refer [here](https://www.w3.org/TR/wot-thing-description/), note that besides the standard, other fields are accepted. Currently the **adapterId** and the **@type**.
        
        - adapterId: It supports adding an additional ID that would help the integrator map the object to the local infrastructure. If it is not included it will be equal to the AURORAL object ID (oid).
        
        - @type: Can be added at global level and also for each interaction. Describes the type of object or interaction respect to the AURORAL ontology. For list of available values refer to the ontology.


        Or use the online [editor](https://eclipse.github.io/editdor/).


        Note: An AURORAL object ID or OID will be automatically added during the registration under the field **id**. This id will be the same as the OID in the AURORAL platform.
      security:
        - basicAuth: []
      tags:
        - Registry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyRegistry"
        description: Registration info
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationSuccesArray"
        "400":
          description: WRONG BODY
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationSuccesArray"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
    get:
      summary: Get all item OIDs
      description: >
        See what objects has your gateway registered in the platform. 
        

        The response is a list of OIDs.
      security:
        - basicAuth: []
      tags:
        - Registry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfStrings"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
    put:
      summary: Update an item
      description: >
        Update an object in the AURORAL platform.


        Fields:
        
        - td: [Mandatory] Thing Description Object.
        
        - avatar: [Optional] Base64 image representation for the object. It will be displayed in the Neighbourhood Manager.


        Important note, **update restrictions** inside the td:
        
        - adapterId: Cannot be changed after registration.
        
        - id: Cannot be changed after registration. It is assigned by the platform on registration.

        The response will contain **error** reason on failure and **success** if the update was completed.
      security:
        - basicAuth: []
      tags:
        - Registry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyItemUpdate"
        description: Update details
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponseArray"
        "400":
          description: WRONG BODY
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponseArray"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/registration/{id}:
    get:
      summary: Get item registration info
      description: Obtain the information of a concrete registered item by providing the OID as parameter.
      security:
        - basicAuth: []
      tags:
        - Registry
      parameters:
        - in: path
          required: true
          name: id
          description: Object id - OID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/registration/remove:
    post:
      summary: Remove an item
      description: Unregister an object from the AURORAL platform
      security:
        - basicAuth: []
      tags:
        - Registry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyUnRegistry"
        description: List of OIDs that have to be removed from the platform
        required: true
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/discovery/local/neighbours:
    get:
      summary: Gateway's reachable objects
      description: >
        See what remote objects can you reach with your Gateway. 


        You will see other gateways of your organisation or partnered organisations.
      security:
        - basicAuth: []
      tags:
        - Local Discovery
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfStrings"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/discovery/local/neighbours/{id}:
    get:
      summary: Item's reachable objects
      description: >
        See what remote objects can you reach which each OID. 
        

        To see objects of other organisations you need to agree on a contract for exchanging data.
        
        
        Get what your gateway can see by not providing OID parameter.
      security:
        - basicAuth: []
      tags:
        - Local Discovery
      parameters:
        - in: path
          name: id
          description: Object id - OID
          required: true
          schema:
            type: string
            default: 0000-0000-0000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfStrings"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/discovery/local/td/{id}:
    get:
      summary: Discover a local item's semantic description
      description: Obtain the TD of a concrete registered item by providing the ID as parameter.
      security:
        - basicAuth: []
      tags:
        - Local Discovery
      parameters:
        - in: path
          required: true
          name: id
          description: Object id - OID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/discovery/local/semantic:
    post:
      summary: SPARQL query to your infrastructure
      description: Send a discovery query to your gateway to retrieve semantic data from your infrastructure
      security:
        - basicAuth: []
      tags:
        - Local Discovery
      requestBody:
        content:
            text/plain:
              schema:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/discovery/remote/td/{id}/{originId}:
    get:
      summary: Discover a remote item's semantic description
      description: >
        Remote discovery. Get thing descriptions of remote objects that some of your objects can see. 
        

        Set the OID of the object you want to reach with **id** parameter and set the OID of the object initiating the request with **originID** (originID must be a neighbour of the target oid). 
      security:
        - basicAuth: []
      tags:
        - Remote Discovery
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: originId
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiJsonObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/discovery/remote/semantic/{id}:
    post:
      summary: SPARQL query to remote infrastructure - EXPERIMENTAL
      description: Send a discovery query to a remote gateway to retrieve semantic data. Experimental version, a final version of this feature will be available in future releases
      security:
        - basicAuth: []
      tags:
        - Remote Discovery
      parameters:
        - in: path
          name: id
          required: true
          description: AGID
          schema:
            type: string
            default: 0000-0000-0000
      requestBody:
        content:
            text/plain:
              schema:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseObject"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
  /api/properties/{id}/{oid}/{pid}:
    get:
      summary: Read a property
      description: Request to get a remote property.
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: oid
          required: true
          description: REMOTE Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: pid
          required: true
          description: Property of the remote object - PID
          schema:
            type: string
      responses:
        "200":
          description: "OK - formats: JSON, Turtle, plaintext "
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiJsonObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
    put:
      summary: Update a property
      description: Request the update of a remote property
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: oid
          required: true
          description: REMOTE Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: pid
          required: true
          description: Property of the remote object - PID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiJsonObject"
        description: Update property
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiJsonObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
  "/api/events/remote/channels/{id}/{oid}":
    get:
      summary: Get event channels
      description: Get event channels of a remote object
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: oid
          required: true
          description: REMOTE Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: array
                description: EIDs of active event channels
                items:
                  type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
  "/api/events/remote/{id}/{oid}/{eid}":
    get:
      summary: Channel status
      description: Get status of a remote event channel
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: oid
          required: true
          description: REMOTE Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: eid
          required: true
          description: Event of the remote object - EID
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
    post:
      summary: Subscribe channel
      description: Subscribe to remote event channel
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: oid
          required: true
          description: REMOTE Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: eid
          required: true
          description: Event of the remote object - EID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
    delete:
      summary: Unsubscribe channel
      description: Unsubscribe to remote event channel
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: oid
          required: true
          description: REMOTE Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: eid
          required: true
          description: Event of the remote object - EID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
  "/api/events/local/{id}/{eid}":
    post:
      summary: Create channel
      description: Create my event channel
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: eid
          required: true
          description: ID of my event - EID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
    put:
      summary: Send message
      description: Put a message in my event channel
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: eid
          required: true
          description: ID of my event - EID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
                type: string
        description: Body of the message
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
    delete:
      summary: Remove channel
      description: Delete my event channel
      security:
        - basicAuth: []
      tags:
        - Consumption
      parameters:
        - in: path
          name: id
          required: true
          description: Object id - OID
          schema:
            type: string
            default: 0000-0000-0000
        - in: path
          name: eid
          required: true
          description: ID of my event - EID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: Error
  /api/collaboration/partners:
    get:
      summary: Get your friend's CIDs
      description: Displays all partners that are in friendship with our organisation.
        Response list of CIDs.
      security:
        - basicAuth: []
      tags:
        - Collaboration
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfStrings"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/collaboration/partners/{cid}:
    get:
      summary: Friend's info
      description: Get info about my partners organisation
      security:
        - basicAuth: []
      tags:
        - Collaboration
      parameters:
        - in: path
          name: cid
          required: true
          description: Partners organisation CID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnersResponseObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/collaboration/contracts/{cid}:
    get:
      summary: Check if you have a contract with a friend
      description: Contract info stored locally. Retrieve the items that you are sharing
        with a given organisation.
      security:
        - basicAuth: []
      tags:
        - Collaboration
      parameters:
        - in: path
          required: true
          name: cid
          description: Organisation id - CID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiJsonObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
  /api/agent/info:
    get:
      summary: Node information
      description: Information about your node
      security:
        - basicAuth: []
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /api/agent/healthcheck:
    get:
      summary: Components status
      description: See status of the adapter main components
      security:
        - basicAuth: []
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseObject"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          description: Error
components:
  responses:
    BadRequest:
      description: Bad request, please check the request body
    Unauthorized:
      description: Unauthorized
    NotFound:
      description: Not Found
    Forbidden:
      description: Forbidden
  requestBodies:
    SparqlRequestObject:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SparqlRequestObject"
      description: "SPARQL query: Filter out specific content that you wish to see. I.E:
        Get me only thermometers"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    ApiResponse:
      type: object
      properties:
        error:
          type: boolean
          default: false
        message:
          type: string
    ApiJsonObject:
      type: object
    ApiResponseObject:
      type: object
      properties:
        error:
          type: boolean
          default: false
        message:
          type: object
    ArrayOfStrings:
      type: array
      items:
        type: string
    RegistrationSuccesArray:
      type: array
      items:
        $ref: "#/components/schemas/RegistrationSuccesObject"
    RegistrationSuccesObject:
      type: object
      properties:
        name:
          type: string
        oid:
          type: string
        password:
          type: string
        error:
          type: string
    UpdateResponseArray:
      type: array
      items:
        $ref: "#/components/schemas/UpdateResponseObject"
    UpdateResponseObject:
      type: object
      properties:
        oid:
          type: string
        error:
          type: string
        success:
          type: boolean
    PartnersResponseObject:
      type: array
      description: Array of partners.
      items:
        type: object
        properties:
          name:
            type: string
            description: Organisation name
          nodes:
            type: array
            description: Array of nodes.
            items:
              type: string
    bodyRegistry:
      properties:
        td:
          type: object
          description: Thing description object in JSON-LD
        avatar:
          type: string
          description: OPTIONAL Base64 representation of an image
    bodyItemUpdate:
      properties:
        td:
          type: object
          description: Thing description object in JSON-LD
        avatar:
          type: string
          description: OPTIONAL Base64 representation of an image
    bodyUnRegistry:
      type: object
      properties:
        oids:
          type: array
          description: OIDs of those objects you would like to unregister
          items:
            type: string
    SparqlRequestObject:
      properties:
        sparql:
          description: Sparql query
          type: string
          default: ""